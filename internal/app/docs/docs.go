// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Ruslan Semagin",
            "email": "pixel365.sup@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/batch": {
            "post": {
                "description": "send multiple messages",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Multiple messages",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer XXX",
                        "description": "Your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Messages",
                        "name": "messages",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_pixel365_messagio_internal_model.InncomingMessage"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_pixel365_messagio_internal_model.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/api/details/{id}": {
            "get": {
                "description": "send multiple messages",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Multiple messages",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer XXX",
                        "description": "Your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_pixel365_messagio_internal_model.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/api/single": {
            "post": {
                "description": "send single message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Single message",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer XXX",
                        "description": "Your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Message object",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_pixel365_messagio_internal_model.InncomingMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_pixel365_messagio_internal_model.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/auth": {
            "post": {
                "description": "get access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Authentication",
                "parameters": [
                    {
                        "description": "Username (email) and password (min 6 characters)",
                        "name": "creds",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_pixel365_messagio_internal_model.Creds"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_pixel365_messagio_internal_model.Token"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_pixel365_messagio_internal_model.Creds": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "github_com_pixel365_messagio_internal_model.InncomingMessage": {
            "type": "object",
            "required": [
                "text",
                "to"
            ],
            "properties": {
                "text": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "github_com_pixel365_messagio_internal_model.Message": {
            "type": "object",
            "required": [
                "id",
                "status",
                "text",
                "to"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/github_com_pixel365_messagio_internal_model.Status"
                },
                "text": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "github_com_pixel365_messagio_internal_model.Status": {
            "type": "string",
            "enum": [
                "pending",
                "error",
                "completed"
            ],
            "x-enum-varnames": [
                "Pending",
                "Error",
                "Completed"
            ]
        },
        "github_com_pixel365_messagio_internal_model.Token": {
            "type": "object",
            "required": [
                "access_token",
                "expires_at",
                "token_type"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.1",
	Host:             "62.109.20.78:8081",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Messagio API",
	Description:      "Test API service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
